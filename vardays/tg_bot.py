import threading
from typing import List
import telebot
from scrapper import Scrapper
import logging
import sqlite3
import datetime
import json
from telebot_dialogue import Dialogue, DialogueManager
from settings import settings, logger

db = settings["db"]
dialogue_manager = DialogueManager()

logger.setLevel(logging.INFO)

GROUPS = settings["groups"]

scrapper = Scrapper()

conn = sqlite3.connect(db, check_same_thread=False)
cursor = conn.cursor()
cursor.execute(
    """CREATE TABLE IF NOT EXISTS Changes(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 
    date TEXT NOT NULL, 
    changes TEXT NOT NULL, 
    group_for TEXT NOT NULL)""")

cursor.execute(
    """CREATE TABLE IF NOT EXISTS Subs(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, 
    user_id INTEGER NOT NULL, 
    subgroup TEXT NOT NULL, 
    last_update TEXT NOT NULL, 
    last_change TEXT NOT NULL)""")

cursor.execute(
    """CREATE TABLE IF NOT EXISTS Users(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, user_id INTEGER NOT NULL)""")

conn.commit()


TOKEN = settings["token"]


# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


class Subscribe:
    def __init__(self, user_id: int, subgroup: str, last_update: datetime.date, last_change: str):
        self.user_id = user_id
        self.subgroup = subgroup
        self.last_update = last_update
        self.last_change = last_change

    def __str__(self) -> str:
        return self.subgroup

    def __int__(self) -> int:
        return self.user_id

    def get_gruop_num(self) -> int:
        return int(self.subgroup[0])

    def get_gruop_char(self) -> str:
        return self.subgroup[1]

def extract_arg(arg: str) -> List[str]:
    logger.info(f"Extracting arguments from '{arg}'")
    return arg.split()[1:]

def get_subscriptions(user_id: int) -> [Subscribe]:
    logger.debug(f"Getting subscriptions for user {user_id}")
    cursor.execute("""SELECT subgroup, last_update, last_change FROM Subs WHERE user_id=?""",
                   (user_id,))
    res = []
    for sub in cursor.fetchall():
        res.append(Subscribe(user_id, sub[0], datetime.datetime.strptime(sub[1], "%d-%m-%Y").date(), sub[2]))

    return res


def find_subscription(user_id, group):
    logger.info(f"Finding subscription for user {user_id} and group {group}")
    subscriptions = get_subscriptions(user_id)
    for sub in subscriptions:
        if sub.subgroup == group:
            return sub

    return None


def add_subscription(user_id: int, subgroup: str) -> None:
    logger.info(f"Adding subscription for user {user_id} and group {subgroup}")
    cursor.execute("""INSERT INTO Subs(user_id, subgroup, last_update, last_change) VALUES(?,?,?,?)""",
                   (user_id, subgroup, datetime.date.today().strftime("%d-%m-%Y"), scrapper.get_varday(subgroup, datetime.date.today())[0] if scrapper.get_varday(subgroup, datetime.date.today()) else "None",))
    conn.commit()

def check_subscription(subscription: Subscribe) -> bool:
    logger.info(f"Checking subscription for user {subscription.user_id} and group {subscription.subgroup}")
    cursor.execute("""SELECT * FROM Subs WHERE user_id=? AND subgroup=?""",
                   (subscription.user_id, subscription.subgroup))
    return bool(cursor.fetchone())

def delete_subscription(subscription: Subscribe) -> None:
    logger.info(f"Deleting subscription for user {subscription.user_id} and group {subscription.subgroup}")
    cursor.execute("""DELETE FROM Subs WHERE user_id=? AND subgroup=?""",
                   (subscription.user_id, subscription.subgroup))
    conn.commit()

def get_subscribers(group: str) -> List[Subscribe]:
    logger.debug(f"Getting subscriptions for group {group}")
    cursor.execute("""SELECT * FROM Subs WHERE subgroup=?""",
                   (group,))
    res = []
    for sub in cursor.fetchall():
        res.append(Subscribe(int(sub[1]), sub[2], datetime.datetime.strptime(sub[3], "%d-%m-%Y").date(), sub[4]))

    return res

def update_subscription(subscription: Subscribe, new_changes, new_date: datetime.date) -> bool:
    logger.info(f"Updating subscription for user {subscription.user_id} and group {subscription.subgroup}")
    cursor.execute("""UPDATE Subs SET last_change=?, last_update=? WHERE user_id=? AND subgroup=?""",
                   (new_changes, new_date.strftime("%d-%m-%Y"), subscription.user_id, subscription.subgroup))
    conn.commit()
    return bool(cursor.rowcount)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start_command(message):
    logger.info(f"User {message.from_user.id} started the bot")
    cursor.execute("""SELECT * FROM Users WHERE user_id=?""",
                   (message.from_user.id,))
    if not cursor.fetchone():
        bot.send_message(message.chat.id, '''–ü—Ä–∏–≤–µ—Ç! üëã  
    –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.  
    
    ‚ú® –ß—Ç–æ —è —É–º–µ—é:  
    - üìÑ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞.  
    - üîç –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –¥–∞—Ç—É –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ.  
    - üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤.  
    - üìÇ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.  
    
    –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é, –∏ –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é! üöÄ
    –ë–æ—Ç –º–æ–∂–µ—Ç –∏–Ω–æ–≥–¥–∞ –ø–∞–¥–∞—Ç—å –ø–æ—Ç–æ–º—É-—á—Ç–æ —Ä–∞–∑—Ä–∞–± —Ä—É–∫–æ–∂–æ–ø, –ø–∏—à–∏—Ç–µ –≤ –ª—Å, –ø–æ–¥–Ω–∏–º—É https://t.me/Tiver211.
    –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: https://github.com/Tiver211/varday_scrapper
    –î–∞–Ω–Ω—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ú–û–£ "–õ–∏—Ü–µ–π ‚Ññ1" –≥.–í—Å–µ–≤–æ–ª–æ–∂—Å–∫–∞. 
    –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —à–∫–æ–ª—ã.''')
        cursor.execute("""INSERT INTO Users(user_id) VALUES(?)""",
                       (message.from_user.id,))
        conn.commit()

    menu(message=message)


@bot.message_handler(commands=["menu"])
def menu(message):
    logger.info(f"User {message.from_user.id} opened the menu")
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_subscribes_control = telebot.types.InlineKeyboardButton(
        text="üîî —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏",
        callback_data="subscribe_controll")
    get_info_button = telebot.types.InlineKeyboardButton(
        text="üîç –ø–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
        callback_data="get_info_control")

    keyboard.row(button_subscribes_control)
    keyboard.row(get_info_button)
    bot.send_message(message.chat.id, "–ú–µ–Ω—é:", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "subscribe_controll")
def subscribes_control(call):
    logger.info(f"User {call.from_user.id} opened the subscribes control")
    dialogue_manager.finish_dialogue(call.message.chat.id)
    keyboard = telebot.types.InlineKeyboardMarkup()
    button_subscribe = telebot.types.InlineKeyboardButton(
        text="‚ûï –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        callback_data="subscribe_menu")
    button_unsubscribe = telebot.types.InlineKeyboardButton(
        text="‚ûñ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        callback_data="unsubscribe_menu")
    button_cancel = telebot.types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –Ω–∞–∑–∞–¥",
        callback_data="cancel_main")
    keyboard.add(button_subscribe, button_unsubscribe)
    keyboard.row(button_cancel)

    subs = get_subscriptions(call.message.chat.id)
    answer_groups = ""
    for subscription in subs:
        answer_groups += f" {subscription.subgroup}     –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - {subscription.last_update.strftime("%d.%m.%Y")}\n"
    ans_message = f"–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: \n{answer_groups}"
    bot.send_message(call.message.chat.id, ans_message, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == "unsubscribe_menu")
def unsubscribe_menu(call):
    logger.info(f"User {call.from_user.id} opened the unsubscribe menu")
    keyboard = telebot.types.InlineKeyboardMarkup()
    groups = get_subscriptions(call.message.chat.id)
    for group in groups:
        keyboard.add(telebot.types.InlineKeyboardButton(str(group), callback_data=str(group)+"_unsubscribe"))
    keyboard.add(telebot.types.InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data="cancel"+"_unsubscribe"))

    bot.send_message(
        call.message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda call: "_unsubscribe" in call.data)
def unsubscribe_group(call):
    logger.info(f"User {call.from_user.id} unsubscribed from group {call.data.split('_')[0]}")
    group = call.data.split("_")[0]
    if group == "cancel":
        subscribes_control(call)
        return

    sub = find_subscription(call.message.chat.id, group)
    if sub:
        delete_subscription(sub)
        bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞ {group}")
        subscribes_control(call)
        return


    bot.send_message(call.message.chat.id, f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞")
    subscribes_control(call)


@bot.callback_query_handler(func=lambda call: call.data == "subscribe_menu")
def subscribe_menu(call):
    logger.info(f"User {call.from_user.id} opened the subscribe menu")
    dialogue = Dialogue(call.message.chat.id, handler=subscribe_group)
    dialogue_manager.add_dialogue(dialogue)
    bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—â–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 8–≤):")


def subscribe_group(message, dialogue: Dialogue):
    logger.info(f"User {message.from_user.id} subscribed to group {message.text}")
    sub = find_subscription(message.from_user.id, message.text)
    if sub:
        bot.send_message(message.chat.id, f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞ {message.text}")
        return

    if message.text not in GROUPS:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
        return

    add_subscription(message.from_user.id, message.text)
    bot.send_message(message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞ {message.text}")
    menu(message)
    dialogue_manager.finish_dialogue(message.from_user.id)


@bot.callback_query_handler(func=lambda call: call.data == "get_info_control")
def get_info_control(call):
    logger.info(f"User {call.from_user.id} opened the get info control")
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("üìÅ –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–∏—è –≤ –≤–∏–¥–µ pdf", callback_data="get_pdf"))
    keyboard.add(telebot.types.InlineKeyboardButton("üóìÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –¥–∞—Ç—É", callback_data="get_changes_by_date"))
    keyboard.add(telebot.types.InlineKeyboardButton("üïõ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="get_last_changes"))
    keyboard.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_main"))

    bot.send_message(call.message.chat.id, "–ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "get_pdf")
def get_pdf_menu(call):
    logger.info(f"User {call.message.chat.id} opened get pdf menu")
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("üïõ –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª", callback_data="download_pdf_last"))
    keyboard.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_info"))

    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥.–º–º.–¥–¥, –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª", reply_markup=keyboard)
    dialogue = Dialogue(call.message.chat.id, handler=send_pdf_by_date)
    dialogue_manager.add_dialogue(dialogue)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_info")
def cancel_info(call):
    logger.info(f"User {call.from_user.id} canceled info control")
    dialogue_manager.finish_dialogue(call.message.chat.id)
    get_info_control(call)

@bot.callback_query_handler(func=lambda call: call.data == "download_pdf_last")
def download_pdf_last(call):
    logger.info(f"User {call.from_user.id} downloaded last pdf")
    files = [f for f in os.listdir("pdf_files") if f.endswith('.pdf') and f != 'temp.pdf']
    date_files = {}
    dialogue_manager.finish_dialogue(call.message.chat.id)
    for file in files:
        try:
            date = datetime.datetime.strptime(file.replace('.pdf', ''), '%Y-%m-%d')
            date_files[file] = date
        except ValueError:
            continue

    if not date_files:
        return None

    latest_file = max(date_files, key=date_files.get)
    try:
        with open(os.path.join("pdf_files", latest_file), 'rb') as pdf_file:
            bot.send_document(call.message.chat.id, document=pdf_file)

    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

def send_pdf_by_date(message, dialogue: Dialogue):
    logger.info(f"User {message.from_user.id} downloaded pdf by date {message.text}")
    try:
        date = datetime.datetime.strptime(message.text, "%Y.%m.%d").strftime("%Y-%m-%d")

    except ValueError:
        bot.send_message(dialogue.user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –ø–æ–∂–∞–ª—É—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥.–º–º.–¥–¥")
        return
    path = os.path.join("pdf_files", date+".pdf")
    if not os.path.exists(path):
        bot.send_message(dialogue.user_id, "–§–∞–π–ª–∞ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∂–∞–ª—É—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é")
        return

    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_info"))
    try:
        with open(path, 'rb') as pdf_file:
            bot.send_document(dialogue.user_id, document=pdf_file, reply_markup=keyboard)

    except Exception as e:
        bot.send_message(dialogue.user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", reply_markup=keyboard)


    dialogue_manager.finish_dialogue(dialogue.user_id)


@bot.callback_query_handler(func=lambda call: call.data == "cancel_main")
def cancel_main(call):
    logger.info(f"User {call.from_user.id} canceled main menu")
    dialogue_manager.finish_dialogue(call.message.chat.id)
    menu(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "get_last_changes")
def get_latest_change(call):
    logger.info(f"User {call.from_user.id} opened get last changes menu")
    dialogue = Dialogue(call.message.chat.id, handler=get_last_change_by_group)
    dialogue_manager.add_dialogue(dialogue)
    bot.send_message(call.message.chat.id, "–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?")

def get_last_change_by_group(message, dialogue: Dialogue):
    logger.info(f"User {message.from_user.id} downloaded last changes by group {message.text}")
    group = message.text
    if group not in GROUPS:
        bot.send_message(dialogue.user_id, "–¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
        return

    result = scrapper.get_last_varday(group)

    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_info"))

    if result:
        date, change = result
        bot.send_message(message.chat.id, f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–ª–∞—Å—Å–µ {message.text}:\n{date} - {change}",
                         reply_markup=keyboard)
    else:
        bot.send_message(dialogue.user_id, "–í –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π", reply_markup=keyboard)

    dialogue_manager.finish_dialogue(dialogue.user_id)

@bot.callback_query_handler(func=lambda call: call.data == "get_changes_by_date")
def get_changes_by_date_menu(call):
    logger.info(f"User {call.from_user.id} opened get changes by date menu")
    dialogue = Dialogue(call.message.chat.id, handler=get_date_for_changes)
    dialogue_manager.add_dialogue(dialogue)
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("üóìÔ∏è –∑–∞–≤—Ç—Ä–∞", callback_data="changes_tomorrow"))
    keyboard.add(telebot.types.InlineKeyboardButton("üóìÔ∏è —Å–µ–≥–æ–¥–Ω—è", callback_data="changes_today"))
    keyboard.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏èÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_info"))
    bot.send_message(call.message.chat.id,
                     "–ó–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? "
                     "–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥.–º–º.–¥–¥, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é",
                     reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "changes_today")
def changes_today(call):
    logger.info(f"User {call.from_user.id} requested changes today")
    if not dialogue_manager.find_dialogue(call.message.chat.id):
        dialogue = Dialogue(call.message.chat.id, handler=get_group_for_chages)
        dialogue.update_context("date", datetime.date.today())
        dialogue_manager.add_dialogue(dialogue)

    else:
        with dialogue_manager.update(call.message.chat.id) as dialogue:
            dialogue.handler = get_group_for_chages
            dialogue.update_context("date", datetime.date.today())

    bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å:")


@bot.callback_query_handler(func=lambda call: call.data == "changes_tomorrow")
def changes_tomorrow(call):
    logger.info(f"User {call.from_user.id} requested changes tomorrow")
    if not dialogue_manager.find_dialogue(call.message.chat.id):
        dialogue = Dialogue(call.message.chat.id, handler=get_group_for_chages)
        dialogue.update_context("date", datetime.date.today()+timedelta(days=1))
        dialogue_manager.add_dialogue(dialogue)

    else:
        with dialogue_manager.update(call.message.chat.id) as dialogue:
            dialogue.handler = get_group_for_chages
            dialogue.update_context("date", datetime.date.today()+timedelta(days=1))
    bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å:")


def get_date_for_changes(message: telebot.types.Message, dialogue: Dialogue):
    logger.info(f"User {message.from_user.id} downloaded changes by date {message.text}")
    try:
        date = datetime.datetime.strptime(message.text, "%Y.%m.%d").date()

    except ValueError:
        bot.send_message(dialogue.user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥.–º–º.–¥–¥")
        return

    with dialogue_manager.update(dialogue.user_id) as dialogue:
        dialogue.handler = get_group_for_chages
        dialogue.update_context("date", date)
        dialogue.update_context("group", None)
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å:")

def get_group_for_chages(message, dialogue: Dialogue):
    logger.info(f"User {message.from_user.id} downloaded changes by group {message.text}")
    group = message.text
    if group not in GROUPS:
        bot.send_message(dialogue.user_id, "–¢–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
        return

    with dialogue_manager.update(dialogue.user_id) as dialogue:
        dialogue.update_context("group", group)

    get_changes_by_date_group(dialogue_manager.find_dialogue(dialogue.user_id))


def get_changes_by_date_group(dialogue):
    group = dialogue.get_context("group")
    date = dialogue.get_context("date")
    logger.info(f"User {dialogue.user_id} requested changes by date {date} and group {group}")
    changes = scrapper.get_varday(group, date)
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("‚¨ÖÔ∏èÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel_info"))
    if changes:
        change, date = changes
        bot.send_message(dialogue.user_id, f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ {date} –∫–ª–∞—Å—Å–∞ {group}: \n{change}", reply_markup=keyboard)

    else:
        bot.send_message(dialogue.user_id, "–í –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ –∑–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π", reply_markup=keyboard)

    dialogue_manager.finish_dialogue(dialogue.user_id)

@bot.message_handler(content_types=["text"], func=lambda message: not message.text.startswith("/"))
def multihandler(message):
    logger.info(f"User {message.from_user.id} sent message: {message.text}")
    dialogue_manager.handle_message(message)

if __name__ == "__main__":
    from tg_handler import *

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–ø–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    tg_handler = TgHandler(bot=bot, scrapper=scrapper, db=db)
    scraper_thread = threading.Thread(target=tg_handler.start_cycle, daemon=True, args=(10,))
    scraper_thread.start()
    logger.info("bot started")
    bot.infinity_polling()